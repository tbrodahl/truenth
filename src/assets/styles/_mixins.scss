@mixin fz($size, $lh: $size * 1.6) {
  font-size: $size;
  line-height: $lh;
}

.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

$base-img-path: '/images/';

@mixin bg-retina($file, $width, $height, $type: 'png') {
  background-image: url(#{$base-img-path}#{$file}.#{$type});
  background-size: #{$width}px #{$height}px;
  width: #{$width}px;
  height: #{$height}px;
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (-moz-min-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx){
    & {
      background-image: url(#{$base-img-path}#{$file}@2x.#{$type});
      -webkit-background-size: #{$width}px #{$height}px;
      -moz-background-size: #{$width}px #{$height}px;
      -o-background-size: #{$width}px #{$height}px;
      background-size: #{$width}px #{$height}px;
    }
  }
}

@mixin pseudo-el($width, $height, $color) {
  &:after {
    background: $color;
    content: '';
    display: block;
    height: #{$height}px;
    width: #{$width}px;
  }
}

@mixin make-col-mobile-spacing() {
  @include media('<md') {
    padding-left: $content-border-size-mobile + 25px;
    padding-right: $content-border-size-mobile + 25px;
  }
}

@mixin make-button($bgColor, $textColor, $bgColorHover: darken($bgColor, 15%), $colorHover: $textColor) {
  background: $bgColor;
  color: $textColor;

  &:hover {
    background: $bgColorHover;
    color: $colorHover;
  }
}

@mixin hero-bg($img, $position: center top, $ext: 'jpg'){
  background: transparent url('/images/#{$img}.#{$ext}') no-repeat scroll $position;
  background-size: cover;
}


// bs4 alpha.2 grid
//
/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width) {
  margin-left: auto;
  margin-right: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @if not $enable-flex {
    @include clearfix();
  }
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  @if $enable-flex {
    display: flex;
    flex-wrap: wrap;
  } @else {
    @include clearfix();
  }
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
}

@mixin make-col($gutter: $grid-gutter-width) {
  position: relative;
  @if not $enable-flex {
    float: left;
  }
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}

@mixin make-col-span($size, $columns: $grid-columns) {
  @if $enable-flex {
    flex: 0 0 percentage($size / $columns);
  } @else {
    width: percentage($size / $columns);
  }
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}
